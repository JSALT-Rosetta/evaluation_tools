#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 11 17:38:36 2017

@author: elinlarsen
"""
import os 
from pycocotools.coco import COCO
import numpy as np
import skimage.io as io
import matplotlib.pyplot as plt
import pylab
import json

from collections import defaultdict


'''Use the COCO API  to build dictionnaries linking object information to image

"ann"=annotation, "cat"=category, and "img"=image.

path_annotations="/pylon2/ci560op/larsene/data/mscoco/annotations/instances_train2014.json"
coco_train=COCO(path_annotations)
categories= coco_train.loadCats(coco_train.getCatIds())
d_cat_name=get_objects_categories.build_dict_cat_name_to_cat_id(categories)
d_cat_to_img=get_objects_categories.build_dict_cat_name_to_img_id(categories, coco_train)
d_img_to_cat=get_objects_categories.reverse_dic(d_cat_to_img, save=False, name="")

'''

def build_dict_cat_name_to_cat_id(categories):
    """
    Build a dictionary having as keys category name and as values category ID 
    ----------
    categories: list of dictionary of the form : {'supercategory': 'person', 'id': 1, 'name': 'person'}
        generated by the loadCats function in the coco API
        
    """
    dict_id_name={}
    for dd in categories :
        dict_id_name[dd['id']]=dd['name']
    return(dict_id_name)
    
def build_dict_cat_name_to_img_id(categories, coco ,save=False, name="", type_category="supercategory"):
    """
    Build a dictionary having as keys category (or supercategory) name  
    and as values  image id
    ---------- 
    categories: list of dictionary of the form : {'supercategory': 'person', 'id': 1, 'name': 'person'}
        generated by the loadCats function in the coco API
        
    coco : python class in the coco API
        
    type_category: string, 
        can either be "category" or "supercategory"
        default="supercategory"
        
    """
    d = defaultdict(set)
    for cat in categories: 
        imgIds=coco.getImgIds(catIds=cat['id'])
        if type_category=="category": 
            d[cat['name']]=imgIds
        elif type_category=="supercategory": 
            d[cat['supercategory']]=imgIds
        else :
            break
            print("Value error : type_category must be either category or supercategory")
    if save: 
        with open(name, 'w') as fp:
            json.dump(d, fp)
    return(d)

def reverse_dic(dic, save=False, name=""):
    """
    For a given dictionary (dic), reverse keys and values. Return a dictionary
    """
    d = defaultdict(set)
    
    for k in dic.keys(): 
        for v in dic.values():
            for ii in v: 
                d[ii].add(k)
        
    if save: 
        with open(name, 'w') as fp:
            json.dump(d, fp)
    return(d)

def dict_nb_value_per_key(dic, show_plot=False):   
    """
    For a given dictionary (dic), compute for each key, the number of values
    Return a dictionary
    """
    d={}
    for key, value in dic.items():
        d[key]=int(len(value))
    if show_plot:
        plt.bar(list(d.keys()), d.values())
        plt.show()
    return(d)


def getImgID_wav(wav_name_list):
    dictionary = {}
    for key in wav_name_list: 
        value = key.split('_')[0]
        dictionary[key]=value
    return(dictionary)


def getImgID_ImgName(image_name_list):
    dictionary = {}
    for s in image_name_list:
        v = s.split('_')[-1] # take the last string 
        v=v.split('.')[0] # get rid of the extension
        v=int(v) # get rid of 0 in case of image file names
        v=str(v)
        dictionary[s]=v
    return(dictionary)
                               

def getMatchingKey1(dic1, dic2):
    t=[]
    for (k1, v1) in dic1.items():
        for (k2,v2) in dic2.items():
            if v1==v2:
                t.append(k1)
    return(t)
